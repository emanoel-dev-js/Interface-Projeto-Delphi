unit UniFornecedores;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, IBQuery, DB, IBCustomDataSet, IBStoredProc,
  Buttons, ComCtrls;

type
  TFrmFornecedores = class(TForm)
    pnlRodaPe: TPanel;
    pnlTopo: TPanel;
    pnlconteudo: TPanel;
    btnCancelar: TButton;
    btnGravar: TButton;
    lbl1: TLabel;
    lbl2: TLabel;
    lbl3: TLabel;
    lbl4: TLabel;
    lbl5: TLabel;
    lbl6: TLabel;
    lbl7: TLabel;
    SP_FORNECEDORES: TIBStoredProc;
    QryFornecedores: TIBQuery;
    pnlCODIGO: TPanel;
    pnlNOME: TPanel;
    pnlTELEFONE: TPanel;
    pnlEMAIL: TPanel;
    pnlCNPJ: TPanel;
    pnlATVIVIDADE: TPanel;
    pnlENDERECO: TPanel;
    edtFOR_ID: TEdit;
    edtFOR_NOME: TEdit;
    edtFOR_TELEFONE: TEdit;
    edtFOR_EMAIL: TEdit;
    edtFOR_CNPJ: TEdit;
    cbbFOR_ATIVO: TComboBox;
    edtFOR_ENDERECO: TEdit;
    BtnLocalizar: TSpeedButton;
    pnl1: TPanel;
    DateTimePicker1: TDateTimePicker;
    Label1: TLabel;
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure edtFOR_IDChange(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure BtnLocalizarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Frmfornecedores : TFrmfornecedores;

implementation

uses View.principal, UniLocFornecedores;

{$R *.dfm}



procedure TFrmFornecedores.btnGravarClick(Sender: TObject);
begin
  if not (ViewPrincipal.TrBanco.InTransaction) then
    ViewPrincipal.TrBanco.StartTransaction;

  try
  with SP_FORNECEDORES do
  begin
    ParamByName('FOR_ID').AsInteger := StrToIntDef(edtFOR_ID.Text ,0);
    ParamByName('FOR_NOME').AsString := edtFOR_NOME.Text;
    ParamByName('FOR_ENDERECO').AsString := edtFOR_ENDERECO.Text;
    ParamByName('FOR_TELEFONE').AsString := edtFOR_TELEFONE.Text;
    ParamByName('FOR_EMAIL').AsString := edtFOR_EMAIL.Text;
    ParamByName('FOR_CNPJ').AsString := edtFOR_CNPJ.Text;
    ParamByName('FOR_ATIVO').AsString := cbbFOR_ATIVO.Text;
    ParamByName('FOR_DATA_CAD').AsDate := DateTimePicker1.Date;


  ExecProc;
  end;


Except on E:Exception do
  begin
    showmessage('Erro:'+E.message+#13+'Operação Cancelada');
    ViewPrincipal.TrBanco.Rollback;
    Abort;
   end;
end;
   showmessage('REGISTRO GRAVADO COM SUCESSO!');
   ViewPrincipal.TrBanco.Commit;

   edtFOR_ID.Clear;
   edtFOR_NOME.Clear;
   cbbFOR_ATIVO.Clear;
   edtFOR_CNPJ.Clear;
   edtFOR_EMAIL.Clear;
   edtFOR_TELEFONE.Clear;
   edtFOR_ENDERECO.Clear;

end;




procedure TFrmFornecedores.BtnLocalizarClick(Sender: TObject);
begin
Application.CreateForm(TFrmLocFornecedores, FrmLocFornecedores);
  try
    FrmLocFornecedores.ShowModal;
  finally
    FreeAndNil(FrmLocFornecedores);
  end;
end;

procedure TFrmFornecedores.edtFOR_IDChange(Sender: TObject);
var
  FornecedorNome : string;
begin
  if Trim(edtFOR_ID.Text) = '' then Exit;

  with QryFornecedores do
  begin
    Close;
    SQL.Text := 'SELECT FOR_NOME FROM FORNECEDORES WHERE FOR_ID = :FOR_ID';
    Params.ParamByName('FOR_ID').AsInteger := StrToIntDef(edtFOR_ID.Text, 0);
    Open;

    if not IsEmpty then
    FornecedorNome := FieldByName('FOR_NOME').AsString
    else
      FornecedorNome := '';

   Close;
  end;

 edtFOR_NOME.text := FornecedorNome;
end;

procedure TFrmFornecedores.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
if Key = VK_ESCAPE then
    Self.Close;
end;

procedure TFrmFornecedores.btnCancelarClick(Sender: TObject);
begin
  Close
end;


end.